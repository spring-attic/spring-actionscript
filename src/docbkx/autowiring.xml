<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="autowiring" xmlns="http://docbook.org/ns/docbook"
	xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ns5="http://www.w3.org/1999/xhtml"
	xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/2000/svg">
	<title>Autowiring</title>

	<sect1 xml:id="autowiring-instances">
		<title>Autowiring instances</title>
		<para>The Spring Actionscript container is able to autowire relationships between collaborating
			objects. This means that it is possible to automatically let Spring Actionscript resolve
			collaborators (other objects) for your object by inspecting the contents of the object
			definition. The autowiring functionality has five modes. Autowiring is specified per object
			and can thus be enabled for some objects, while other objects will not be autowired. Using
			autowiring, it is possible to reduce or eliminate the need to specify properties or
			constructor arguments, thus saving a significant amount of typing. When using
				<abbrev>XML</abbrev>-based configuration metadata, the autowire mode for a object definition
			is specified by using the autowire attribute of the <emphasis role="bold"
				>&lt;object/></emphasis> element. The following values are allowed:</para>
		<table audience="" border="1" style="">
			<caption>Autowiring modes</caption>

			<thead>
				<tr>
					<th>Mode</th>

					<th>Explanation</th>
				</tr>
			</thead>

			<tr>
				<td>no</td>

				<td>No autowiring at all. Object references must be defined via a <literal>ref</literal>
					element. This is the default, and changing this is discouraged for larger deployments,
					since explicitly specifying collaborators gives greater control and clarity. To some
					extent, it is a form of documentation about the structure of a system.</td>
			</tr>

			<tr>
				<td>byName</td>

				<td>Autowiring by property name. This option will inspect the container and look for an
					object named exactly the same as the property which needs to be autowired. For example, if
					you have an object definition which is set to autowire by name, and it contains a
						<emphasis>master</emphasis> property, Spring Actionscript will look for an object
					definition named <literal>master</literal>, and use it to set the property.</td>
			</tr>

			<tr>
				<td>byType</td>

				<td>Allows a property to be autowired if there is exactly one object of the property type in
					the container. If there is more than one, a fatal exception is thrown, and this indicates
					that you may not use <emphasis>byType</emphasis> autowiring for that object. If there are
					no matching objects, nothing happens; the property is not set.</td>
			</tr>

			<tr>
				<td>constructor</td>

				<td>This is analogous to <emphasis>byType</emphasis>, but applies to constructor arguments.
					If there isn't exactly one object of the constructor argument type in the container, a
					fatal error is raised.</td>
			</tr>

			<tr>
				<td>autodetect</td>

				<td>Chooses constructor or <emphasis>byType</emphasis> through introspection of the object
					class. If a default (parameterless) constructor is found, the byType mode will be
					applied.</td>
			</tr>
		</table>
		<para>Note that explicit dependencies in <emphasis role="bold">&lt;property/></emphasis> and
				<emphasis role="bold">&lt;constructor-arg/></emphasis> settings always override autowiring.
			Please also note that it is not currently possible to autowire so-called simple properties
			such as primitives, Strings, and Classes (and arrays of such simple properties). (This is
			by-design and should be considered a feature.) When using either the <emphasis role="bold"
				>byType</emphasis> or constructor autowiring mode, it is possible to wire arrays. In such
			cases all autowire candidates within the container that match the expected type will be
			provided to satisfy the dependency.</para>
		<para> It is important to understand the various advantages and disadvantages of autowiring.
			Some advantages of autowiring include: <itemizedlist>
				<listitem>
					<para> Autowiring can significantly reduce the volume of configuration required. However,
						mechanisms such as the use of a object template (discussed elsewhere in this chapter)
						are also valuable in this regard. </para>
				</listitem>
			</itemizedlist><itemizedlist>
				<listitem>
					<para> Autowiring can cause configuration to keep itself up to date as your objects
						evolve. For example, if you need to add an additional dependency to a class, that
						dependency can be satisfied automatically without the need to modify configuration. Thus
						there may be a strong case for autowiring during development, without ruling out the
						option of switching to explicit wiring when the code base becomes more stable. </para>
				</listitem>
			</itemizedlist></para>
		<para> Some disadvantages of autowiring: <itemizedlist>
				<listitem>
					<para> Autowiring is more magical than explicit wiring. Although, as noted in the above
						table, Spring Actionscript is careful to avoid guessing in case of ambiguity which might
						have unexpected results, the relationships between your Spring Actionscript-managed
						objects are no longer documented explicitly. </para>
				</listitem>
				<listitem>
					<para> Wiring information may not be available to tools that may generate documentation
						from a Spring Actionscript container. </para>
				</listitem>
			</itemizedlist></para>
		<para>Another issue to consider when autowiring by type is that multiple object definitions
			within the container may match the type specified by the setter method or constructor argument
			to be autowired. For arrays, collections, or maps, this is not necessarily a problem. However
			for dependencies that expect a single value, this ambiguity will not be arbitrarily resolved.
			Instead, if no unique object definition is available, an Exception will be thrown. You do have
			several options when confronted with this scenario. First, you may abandon autowiring in favor
			of explicit wiring. Second, you may designate that certain object definitions are never to be
			considered as candidates by setting their 'autowire-candidate' attributes to 'false' as
			described in the next section. Third, you may designate a single object definition as the
			primary candidate by setting the '<emphasis role="bold">primary</emphasis>' attribute of its
				<emphasis role="bold">&lt;object/></emphasis> element to '<emphasis role="bold"
				>true'</emphasis>.</para>
		<para>When deciding whether to use autowiring, there is no wrong or right answer in all cases. A
			degree of consistency across a project is best though; for example, if autowiring is not used
			in general, it might be confusing to developers to use it just to wire one or two object
			definitions.</para>
		<para>This is an example of autowiring using <abbrev>XML</abbrev>
			configuration:<programlisting language="xml">&lt;object class="..." autowire="byType"/></programlisting></para>
		<para><abbrev>MXML</abbrev> configuration:</para>
		<programlisting language="xml">&lt;sas:Object clazz="{...}" autoWireMode="byType"/></programlisting>
		<para>Metadata configuration:</para>
		<programlisting language="actionscript">[Component(autowire="byType")]</programlisting>
		<note>
			<para> If a property is of type <literal>IApplicationContext</literal> or
					<literal>ApplicationDomain</literal> the application context instance or its
					<literal>ApplicationDomain</literal> property will be injected when autowiring <emphasis
					role="bold">byType</emphasis>.</para>
		</note>
		<sect2>
			<title>Autowiring objects using annotations</title>
			<para> A different way of letting the Spring Actionscript container know how to configure an
				object is by adding specific metadata annotations to the component's sources. Obviously this
				is only possible when the developer actually has access to the source code. Thus, this
				solution does not apply to the situation in which you'd like to autowire existing objects,
				such as the ones that are already part of the Flex framework. </para>
			<para> The simplest way to inject a property by type is by decorating its source like this:
				<programlisting language="actionscript">public class ExampleComponent extends UIComponent {

	[Inject]
	public var modelInstance:IModelLocator;

	public function ExampleComponent() {
		super();
	}

}</programlisting></para>
			<para>Once this component is created (or added to the stage), the Spring Actionscript
				container will search in its container an object of type <emphasis role="italic"
					>IModelLocator</emphasis> and assign it to the <emphasis role="bold"
					>modelInstance</emphasis> property of the <emphasis role="italic"
					>ExampleComponent</emphasis>.Wiring by name is also possible, all that is needed is a
				little extra metadata:</para>
			<programlisting language="actionscript">public class ExampleComponent extends UIComponent {

	[Inject(mode='byName')]
	public var modelInstance:IModelLocator;

	public function ExampleComponent() {
		super();
	}

}</programlisting>
			<para>Now the Spring Actionscript container will look for an object in its configuration with
				the id '<emphasis role="bold">modelInstance</emphasis>' and assign this to the <emphasis
					role="bold">modelInstance</emphasis> property of the <emphasis role="italic"
					>ExampleComponent</emphasis>.There's another way of injecting by name, suited for the
				situation where the name of the property and the id in the configuration don't match. What
				if the <emphasis role="italic">IModelLocator</emphasis> instance described in the
				configuration has an id called '<emphasis role="bold">modelLocator</emphasis>' and for some
				reason this can't be easily changed?</para>
			<para>Easy, you can define the exact name in the metadata as follows:</para>
			<programlisting language="actionscript">public class ExampleComponent extends UIComponent {

	[Inject(name='ModelLocator')]
	public var modelInstance:IModelLocator;

	public function ExampleComponent() {
		super();
	}

}</programlisting>
			<para>All these examples use the <emphasis role="bold">[Inject]</emphasis> metadata, Spring
				Actionscript supports this metadata to help in the effort to <literal
					xlink:href="https://github.com/darscan/AS3-DI-Metadata">to standardise AS3 DI Metadata
					tags</literal>.</para>
			<para>The original <emphasis role="bold">[Autowired]</emphasis> metadata, however, is still
				supported as well.</para>
			<note>
				<para> When using the <emphasis role="bold">[Inject]</emphasis> or <emphasis role="bold"
						>[Autowired]</emphasis> metadata do not forget to add these compiler settings to your
					Flex project: <emphasis role="bold">-keep-as3-metadata += Inject,Autowired</emphasis>.
				</para>
			</note>
		</sect2>
		<sect2>
			<title>Binding an object property to a property of an object in the container</title>
			<para>To keep your objects as decoupled as possible it might be preferred not to inject the
				modelInstance into it, but just a certain property of the model. Since the data in the model
				is subject to change (usually it is populated with data retrieved from remote method
				invocations), it would also be good to bind your view to the model. </para>
			<para> This can be achieved by using the following metadata: </para>
			<programlisting language="actionscript">public class ExampleProductListComponent extends UIComponent {

	[Autowired(name='ModelLocator',property='products')]
	public var products:ArrayCollection;

	public function ExampleProductListComponent() {
		super();
	}

}</programlisting>
			<para> This example assumes that the ModelLocator object has a property called '<emphasis
					role="bold">products</emphasis>' of type <emphasis role="italic"
					>ArrayCollection</emphasis>. A binding is established between these two objects, so when
				the products <emphasis role="italic">ArrayCollection</emphasis> in the model in updated, so
				will the component. </para>
			<para> The property value can also be a chain of objects, so this will work as well: </para>
			<programlisting language="actionscript">public class ExampleProductListComponent extends UIComponent {

	[Autowired(name='ModelLocator',property='productManager.products')]
	public var products:ArrayCollection;

	public function ExampleProductListComponent() {
		super();
	}

}</programlisting>
			<note>
				<para>Since this functionality makes use of Flex binding it is therefore only available in
					Flex applications.</para>
			</note>
		</sect2>
		<sect2>
			<title>Injecting an object property with an external property value</title>
			<para>Its also possible to inject the value of an external property into a autowired object.
				(If you want to know more about external properties read the section '<literal
					linkend="using-property-files">Using property files</literal>'). </para>
			<para> To do this add metadata to your source like this:</para>
			<programlisting language="actionscript">public class ExampleComponent extends UIComponent {

	[Autowired(externalProperty='currentURL')]
	public var websiteURL:String;

	public function ExampleComponent() {
		super();
	}

}</programlisting>
			<para> Where the value of the <emphasis role="bold">externalProperty</emphasis> metadata
				argument key matches the key in one of the loaded property files. </para>
		</sect2>
		<sect2 xml:id="autowiring-stage-components">
			<title>Autowiring stage components</title>
			<para>Spring Actionscript knows one situation when used in conjunction with the Flash which
				differs from other Spring implementations. This is when visual components (often declared
					as <literal>MXML</literal> components) need to be autowired. In this case the container
				can't be responsible for the actual creation of the components, so it is deferred back to
				the Flex/Flash application.</para>
			<para> Concretely, we want to retain the expressiveness of <literal>MXML</literal> declaration
				and combine it with the <abbrev>IoC</abbrev> capabilities of Spring Actionscript. </para>
			<para> For example, given this (very simple) piece of <abbrev>MXML</abbrev> markup: </para>
			<programlisting language="xml">&lt;?xml version="1.0" encoding="utf-8"?>
&lt;s:Application
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:custom="http://www.mydomain.com/flexcomponents">

	&lt;custom:OrderView myDependency="{this.applicationModel}" id="exampleComponent"/>

&lt;/s:Application></programlisting>
			<para>In this case the application model instance is directly injected through concrete
				markup. In a lot of cases this is perfectly acceptable, but Spring Actionscript offers a
				little extra flexibility by being able to inject the model instance at runtime.</para>
			<para>Just like a regular object, the OrderView component may be annotated with <emphasis
					role="bold">[Inject]</emphasis> or <emphasis role="bold">[Autowired]</emphasis>
				metadata.</para>
			<para>Spring Actionscript is able to perform these dependency injections by hooking an event
				listener into the <emphasis role="bold">Event.ADDED_TO_STAGE</emphasis> event and process
				the components right after they have been added to the stage.</para>
			<note>
				<para>The engine that is responsible for managing the stage processing in the
						<literal>FlashStageObjectProcessorRegistry</literal> that is offered by the <literal
						xlink:href="https://www.as3commons.org/as3-commons-stageprocessing/index.html"
						>AS3Commons-stageprocessing library</literal>.</para>
			</note>
			<para>To make use of the metadata processor that handles all of the functionality described in
				the following sections add this to the <abbrev>XML</abbrev> configuration: </para>
			<programlisting language="xml">&lt;object id="autowiringStageProcessor" class="org.springextensions.actionscript.stage.DefaultAutowiringStageProcessor"/></programlisting>
			<para><abbrev>MXML</abbrev> configuration:</para>
			<programlisting language="xml">&lt;sas:Object id="autowiringStageProcessor" clazz="{DefaultAutowiringStageProcessor}"/></programlisting>
			<para>Or use this custom
				component:<programlisting>&lt;sas:StageAutowireProcessor/></programlisting></para>
			<para> There are several ways of configuration for this stituation, in the following sections
				we will look at them one by one. </para>
			<note>
				<para>There are several shortcuts to add these processors to your configuration. How this
					works and how to build your own extensions is covered in the section '<literal
						linkend="extending-configuration-types">Extending configurations</literal>'.</para>
			</note>
			<note>
				<para>The autowiring of stage components is part of the Stage extension point. To read more
					about this and learn how to create your own processors, check out the section '<literal
						linkend="stage-processors">Stage object processors</literal>'.</para>
			</note>
			<note>
				<para>To enable stage wiring it is important that the application context is
					associated with one or more root views. These can be passed as a Vector to the
					constructor or at a later stage by using the addRootView() method.</para>
			</note>
			<sect3>
				<title>Determining which stage objects will be autowired</title>
				<para>By default the <literal>DefaultSpringObjectSelector</literal> is used to filter out
					which stage components will be autowired. It is adviced though to create your own
						<literal>IObjectSelector</literal> implementation to streamline the selection process.
					(A LOT of components get added and removed from the stage.)</para>
				<para>Now, imagine a situation where you know beforehand that only components that implement
					a specific marker interface need to be autowired. In that case you can implement a much
					simpler selection process. Let's say the marker interface is called
						<literal>IAutowiredComponent</literal>, then the implementation of the <emphasis
						role="italic">IObjectSelector.approve()</emphasis> method needs to be simply
					this:<programlisting>public function approve(object:Object):Boolean {
	return (object is IAutowiredComponent);
}</programlisting></para>
				<para>This will certainly boost the efficiency of the selection process!</para>
			</sect3>
			<sect3 xml:id="autowiring-stage-components-using-object-definitions">
				<title>Autowiring stage components using Object Definitions</title>
				<para>Stage components can be configured using metadata that describes the desired
					injections, but this can also be entirely expressed a regular object definitions. Here is
					how to configure the <literal>ExampleComponent</literal> to be autowired by type: </para>
				<programlisting language="xml">&lt;object id="exampleComponent" class="classes.components.ExampleComponent" autowire="byType" singleton="false"/></programlisting>
				<para>In this example we assume that the ExampleComponent instance on the stage has a <emphasis
						role="bold">name</emphasis> property with the value <emphasis role="italic"
						>exampleComponent</emphasis>.</para>
				<para>Let us be clear immediately though, autowiring a stage component in this way is
						a <emphasis role="bold">bad</emphasis> idea. The Spring Actionscript container will, in
					this case, actually loop through <emphasis role="bold">every</emphasis> property of the
						<literal>ExampleComponent</literal> instance and try to find a matching wiring candidate
					in the container. This will very quickly become very slow, so please regard this example
					as a proof of concept but don't use it in any actual production code.</para>
				<para>Autowiring by name is almost the same and the same warning as for wiring by type is
						applicable: <emphasis role="italic">don't do it.</emphasis>
				</para>
				<para>The most obvious way of configuring the <literal>ExampleComponent</literal> is by
					simply injecting the property explicitly like this:</para>
				<programlisting language="xml">&lt;object id="exampleComponent" class="classes.components.ExampleComponent" scope="<emphasis role="bold">stage</emphasis>">
	&lt;property name="modelInstance" ref="modelLocator"/>
&lt;/object></programlisting>
				<para><literal>MXML</literal> configuration:</para>
				<programlisting language="xml">&lt;sas:Object id="exampleComponent" clazz="{ExampleComponent}" scope="<emphasis role="bold">stage</emphasis>">
	&lt;sas:Property name="modelInstance" ref="{modelLocator}"/>
&lt;/object></programlisting>
				<para>Metadata configuration:</para>
				<programlisting language="xml">&lt;?xml version="1.0" encoding="utf-8"?>
&lt;s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  implements="com.classes.stage.IAutowiredComponent">
	&lt;fx:Metadata>
		[Component(id="exampleComponent",scope="<emphasis role="bold">stage</emphasis>")]
	&lt;/fx:Metadata>
	&lt;fx:Script>
		&lt;![CDATA[
			[Property(ref="modelLocator")]
			public var modelInstance:ModelLocator;
		]]&gt;
	&lt;/fx:Script>
&lt;/s:VGroup></programlisting>
				<note>
					<para>Do take notice of the <emphasis role="bold">scope="stage"</emphasis> attribute on each of
						these configuration examples. Don't forget to add this value to each and
						every stage component definition entry. Spring Actionscript defaults an
						object definition to a singleton scope and instantiates every singleton in
						the configuration at startup. Failing to add the <emphasis role="bold"
							>scope="stage"</emphasis> attribute will result in Spring Actionscript
						creating a whole bunch of stage component instances unnecessarily. </para>
				</note>
			</sect3>
			<sect3>
				<title>How to determine which object definition to use for which stage component</title>
				<para>Once a component has been added to the stage and is being processed by the autowiring
					processor it will need a mechanism that supplies an object definition for the component in
					question. This particular task is bestowed upon the
						<literal>IObjectDefinitionResolver</literal> interface. This interface is a small
					one:<programlisting language="actionscript">public interface IObjectDefinitionResolver {
	function resolveObjectDefinition(object:*):IObjectDefinition;
}</programlisting></para>
				<para>An object that implements this interface is responsible for retrieving, or creating,
					an object definition for a given object instance. Spring Actionscript by default offers
					the <literal>DefaultObjectDefinitionResolver</literal> class. This implementation uses
					different strategies to retrieve the appropriate <literal>IObjectDefinition</literal> for
					an object. First of all it uses the value of its <emphasis role="bold"
						>objectIdProperty</emphasis> property to find the object definition by name. By default
					the value of this property is '<emphasis role="bold">name</emphasis>. This means that if a
					stage component is being examined whose name property has a value of '<emphasis
						role="bold">myStageComponent</emphasis>', the
						<literal>DefaultObjectDefinitionResolver</literal> will look for an object definition
					with an id of '<emphasis role="bold">myStageComponent</emphasis>'. If the object
					definition can't be found it will fall back on trying to find an object definition by
					type, but only if the <emphasis role="bold">lookupByType</emphasis> property on the
						<literal>DefaultObjectDefinitionResolver</literal> is set to <emphasis role="bold"
						>true</emphasis>.</para>
				<para>If both of these options fail the <literal>DefaultObjectDefinitionResolver</literal>
					will return <emphasis role="italic">null</emphasis>. This will happen in the case that a
					stage component has been decorated with autowiring metadata and has no further use for an
					object definition. Of course, the both can be combined as well, but its open to discussion
					whether this is advisable. To use the <literal>DefaultObjectDefinitionResolver</literal>
					add this to your <abbrev>XML</abbrev> configuration:</para>
				<programlisting language="xml">&lt;object id="defaultObjectDefinitionResolver"
	class="org.springextensions.actionscript.stage.DefaultObjectDefinitionResolver"/></programlisting>
				<para><abbrev>MXML</abbrev> configuration:</para>
				<programlisting language="xml">&lt;sas:Object id="defaultObjectDefinitionResolver"
	clazz="{DefaultObjectDefinitionResolver}"/></programlisting>
				<para>By default the DefaultObjectDefinitionResolver uses the <emphasis role="bold"
						>name</emphasis> property to match an object definition with a stage
					component. You can change this by setting the <emphasis role="bold"
						>objectIdProperty</emphasis> property on the definition resolver. So, in
					case you'd like to use the <emphasis role="bold">id</emphasis> property for
					matching, change the configuration to
					this:<programlisting>&lt;sas:Object id="defaultObjectDefinitionResolver"
	clazz="{DefaultObjectDefinitionResolver}">
	&lt;sas:Property name="<emphasis role="bold">objectIdProperty</emphasis>" value="<emphasis role="bold">id</emphasis>"/>
&lt;/sas:Object></programlisting></para>
				<para>Naturally, its also possible to create your own custom implementation of the
						<literal>IObjectDefinitionResolver</literal> and use your own logic to look
					up or create a definition for a stage component.</para>
			</sect3>
			<sect3>
				<title>Implementing custom autowiring support using the IAutowireProcessor interface</title>
				<para>Spring Actionscript wouldn't be Spring Actionscript if it didn't allow you to
					implement your own brand of autowiring. Naturally the Spring Actionscript team is of the
					opinion that the offered autowiring functionality is about as broad as one can imagine,
					but should the need arise to step outside the confines of Spring Actionscript autowiring
					than this entirely possible.</para>
				<para>In this particular case the <literal>IAutowireProcessor</literal> is your friend. And
					as you are used to, its not a very complicated one, see for yourself:</para>
				<programlisting language="actionscript">public interface IAutowireProcessor {
	function autoWire(object:Object, objectDefinition:IObjectDefinition = null, objectName:String = null):void;

	function preprocessObjectDefinition(objectDefinition:IObjectDefinition):void;

	function findAutowireCandidateName(clazz:Class):String;
}</programlisting>
				<para>The first method is the main autoWire() method that is invoked by the object container
					immediately after creation.</para>
				<para>The second method is invoked by the container right before an object is actually
					created, so this would typically be a good moment to change any kind of constructor
					argument autowiring or perhaps change the autowiring strategy of the current
						<literal>IObjectDefinition</literal> based on some pre-configured logic.</para>
				<para>As you can see in the default implementation used by the
						<literal>DefaultObjectFactory</literal>, (fittingly titled
						<literal>DefaultAutowireProcessor</literal>),it is also possible for your own
						<literal>IAutowireProcessor</literal> implementation to include the
						<literal>IObjectFactoryAware</literal> interface. If your instance implements this
					particular interface it will automatically be injected by the object factory instance to
					which the <literal>IAutowireProcessor</literal> is assigned.</para>
				<para>Now, after you've created your own implementation, its time to hook it up to the
					object container, typically this would be done something like this:
					<programlisting language="actionscript">var applicationContext:ApplicationContext = new ApplicationContext();
applicationContext.autowireProcessor = new MyCustomAutowireProcessor();</programlisting></para>
				<para>After that your own autowiring logic will be performed on any object created by the
						<literal>ApplicationContext</literal> instance.</para>
				<note>
					<para>Consequently, when you don't need the autowiring functionality at all in your
						application, it might be an idea to set the <emphasis role="italic"
							>autowireProcessor</emphasis> property to <emphasis role="bold">null</emphasis> as
						this will yield a small performance benefit.</para>
				</note>
			</sect3>
		</sect2>
	</sect1>
</chapter>
