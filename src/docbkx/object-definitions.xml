<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="object-definitions" xmlns="http://docbook.org/ns/docbook"
	xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ns5="http://www.w3.org/1999/xhtml"
	xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/2000/svg">
	<title>Object definitions</title>

	<sect1 xml:id="object-definitions-in-depth">
		<title>An in-depth look at object definitions</title>
		<para>Object definitions act as the 'recipes' with which object instances are created and
			configured. These are, naturally, a very important aspect of the entire Spring Actionscript
			library. In these sections every property of the object definition is explained along with
			examples of how to populate them using the various types of configuration. To learn more about
			configurations, check the section '<literal linkend="configuration-types">Configuration
				types</literal>'.</para>
		<para>
			<itemizedlist>
				<listitem>
					<para>
						<literal linkend="autowiremode">autoWireMode</literal>
					</para>
				</listitem>
				<listitem>
					<para>
						<literal linkend="childcontextaccess">childContextAccess</literal>
					</para>
				</listitem>
				<listitem>
					<para>
						<literal linkend="classname">className</literal>
					</para>
				</listitem>
				<listitem>
					<para>
						<literal linkend="clazz">clazz</literal>
					</para>
				</listitem>
				<listitem>
					<para>
						<literal linkend="constructorarguments">constructorArguments</literal>
					</para>
				</listitem>
				<listitem>
					<para>
						<literal linkend="customconfiguration">customConfiguration</literal>
					</para>
				</listitem>
				<listitem>
					<para>
						<literal linkend="dependencycheck">dependencyCheck</literal>
					</para>
				</listitem>
				<listitem>
					<para>
						<literal linkend="dependson">dependsOn</literal>
					</para>
				</listitem>
				<listitem>
					<para>
						<literal linkend="destroymethod">destroyMethod</literal>
					</para>
				</listitem>
				<listitem>
					<para>
						<literal linkend="factorymethod">factoryMethod</literal>
					</para>
				</listitem>
				<listitem>
					<para>
						<literal linkend="factoryobjectname">factoryObjectName</literal>
					</para>
				</listitem>
				<listitem>
					<para>
						<literal linkend="initmethod">initMethod</literal>
					</para>
				</listitem>
				<listitem>
					<para>
						<literal linkend="isabstract">isAbstract</literal>
					</para>
				</listitem>
				<listitem>
					<para>
						<literal linkend="isautowirecandidate">isAutoWireCandidate</literal>
					</para>
				</listitem>
				<listitem>
					<para>
						<literal linkend="isinterface">isInterface</literal>
					</para>
				</listitem>
				<listitem>
					<para>
						<literal linkend="islazyinit">isLazyInit</literal>
					</para>
				</listitem>
				<listitem>
					<para>
						<literal linkend="issingleton">isSingleton</literal>
					</para>
				</listitem>
				<listitem>
					<para>
						<literal linkend="parent">parent</literal>
					</para>
				</listitem>
				<listitem>
					<para>
						<literal linkend="parentname">parentName</literal>
					</para>
				</listitem>
				<listitem>
					<para>
						<literal linkend="primary">primary</literal>
					</para>
				</listitem>
				<listitem>
					<para>
						<literal linkend="scope">scope</literal>
					</para>
				</listitem>
				<listitem>
					<para>
						<literal linkend="skipmetadata">skipMetadata</literal>
					</para>
				</listitem>
				<listitem>
					<para>
						<literal linkend="skippostprocessors">skipPostProcessors</literal>
					</para>
				</listitem>
			</itemizedlist>
		</para>
		<sect2 xml:id="autowiremode">
			<title>autoWireMode</title>
			<para>Determines the way an object will be autowired (configured). To learn more about
				autowiring, check out the '<literal linkend="autowiring">Autowiring</literal>'
				section.</para>
		</sect2>
		<sect2 xml:id="childcontextaccess">
			<title>childContextAccess</title>
			<para>Determines if the object definition will be injected into child contexts. To learn more
				about this, check out the '<literal linkend="context-children">Context children</literal>'
				section.</para>
		</sect2>
		<sect2 xml:id="classname">
			<title>className</title>
			<para>The fully qualified classname of the object that the current object definition
				describes.</para>
		</sect2>
		<sect2 xml:id="clazz">
			<title>clazz</title>
			<para>The Class of the object that the current object definition describes. This property will
				be set once the definition gets registered by an
					<literal>IObjectDefinitionsRegistry</literal>.</para>
		</sect2>
		<sect2 xml:id="constructorarguments">
			<title>constructorArguments</title>
			<para>An array of arguments that will be passed to the constructor of the object when it gets
				instantiated by the application context.</para>
		</sect2>
		<sect2 xml:id="customconfiguration">
			<title>customConfiguration</title>
			<para>Optional extra data that can be used by other processing logic. May also be an instance
				of <literal>ICustomConfigurator</literal> or an instance of
					<literal>Vector.&lt;ICustomConfigurator>.</literal> Learn more about this in the section
					'<literal linkend="custom-object-definition-configurators">Custom object definition
					configurators</literal>'.</para>
		</sect2>
		<sect2 xml:id="dependencycheck">
			<title>dependencyCheck</title>
			<para> Spring Actionscript has 4 different validation modes to check if properties have been
				set on an object. The different dependency check modes are '<emphasis role="bold"
					>none</emphasis>', '<emphasis role="bold">simple</emphasis>', '<emphasis role="bold"
					>object</emphasis>', and '<emphasis role="bold">all</emphasis>'. The default mode is
					'<emphasis role="bold">none</emphasis>', so there isn't any dependency check validation
				unless explicitly configured. All values being checked must have been set in the
				configuration file or by autowiring. If a class has any defaults or fields that don't need
				to be set, the dependency check modes won't be of any use. </para>
			<table audience="" border="1" style="">
				<caption>Autowiring modes</caption>

				<thead>
					<tr>
						<th>Mode</th>

						<th>Explanation</th>
					</tr>
				</thead>

				<tr>
					<td>none</td>

					<td>No dependency checking. This is the default.</td>
				</tr>

				<tr>
					<td>simple</td>

					<td>Dependency check for primitives and collections.</td>
				</tr>

				<tr>
					<td>object</td>

					<td>Dependency check for objects (collaborators).</td>
				</tr>

				<tr>
					<td>all</td>

					<td>Dependency check for primitives, collections, and objects (collaborators).</td>
				</tr>
			</table>
			<para> The '<emphasis role="bold">simple</emphasis>' mode checks that all primitive and
				collection values have been set. The '<emphasis role="bold">object</emphasis>' mode checks
				that all collaborators (objects) have been set. The '<emphasis role="bold">all</emphasis>'
				mode checks for everything that the '<emphasis role="bold">simple</emphasis>' and '<emphasis
					role="bold">object</emphasis>' modes do. </para>

		</sect2>
		<sect2 xml:id="dependson">
			<title>dependsOn</title>
			<para> For most situations, the fact that an object is a dependency of another is expressed by
				the fact that one object is set as a property of another. This is typically accomplished
				with the <emphasis role="bold">&lt;ref/&gt;</emphasis> element in <abbrev>XML</abbrev>-based
				configuration metadata. For the relatively infrequent situations where dependencies between
				objects are less direct, the '<emphasis role="bold">depends-on</emphasis>' attribute may be
				used to explicitly force one or more objects to be initialized before the object using this
				element is initialized. Find below an example of using the '<emphasis role="bold"
					>depends-on</emphasis>' attribute to express a dependency on a single object. </para>
			<programlisting language="xml">&lt;object id="objectOne" class="ExampleObject" depends-on="manager"/>

&lt;object id="manager" class="ManagerObject" />   </programlisting>
			<para>Or in <abbrev>MXML</abbrev> configurations</para>
			<programlisting language="xml">&lt;sas:Object id="objectOne" clazz="{ExampleObject}" dependsOn="{[manager]}"/>

&lt;sas:Object id="manager" clazz="{ManagerObject}" /></programlisting>
			<para>Or in metadata
				configurations<programlisting language="actionscript">[Component(id="objectOne", dependsOn="manager")]</programlisting></para>
			<para> If you need to express a dependency on multiple objects, you can supply a list of
				object names as the value of the '<emphasis role="bold">depends-on</emphasis>' attribute,
				delimited by
				commas.<programlisting language="xml">&lt;object id="objectOne" class="ExampleObject" depends-on="manager,accountDao">
  &lt;property name="manager" ref="manager" />
&lt;/object>

&lt;object id="manager" class="ManagerObject" />
&lt;object id="accountDao" class="x.y.as.AccountDao" /></programlisting></para>
			<para>In <emphasis role="bold">MXML</emphasis> configurations you simply pass in an
					<literal>Array</literal> of <literal>MXMLObjectDefinition</literal>
				instances.<programlisting language="xml">&lt;sas:Object id="objectOne" class="ExampleObject" dependsOn="{[manager,accountDao]}">
  &lt;sas:Property name="manager" ref="{manager}" />
&lt;/sas:Object>

&lt;sas:Object id="manager" clazz="{ManagerObject}" />
&lt;sas:Object id="accountDao" clazz="{AccountDao}" /></programlisting></para>
			<para>Or in
				metadata<programlisting language="actionscript">[Component(id="objectOne", dependsOn="manager,accountDao")]</programlisting></para>
		</sect2>
		<sect2 xml:id="destroymethod">
			<title>destroyMethod</title>
			<para>Like the application context, also objects that are managed by the context may need to
				have a disposal method in which they are able to release any resources they are holding.
				There are two ways of letting the context know which methods need to be invoked on an object
				once the context itself is being disposed: <itemizedlist>
					<listitem>
						<para>The IDisposable interface</para>
					</listitem>
					<listitem>
						<para> The destroyMethod property on an object definition</para>
					</listitem>
				</itemizedlist></para>
			<sect3>
				<title>The IDisposable interface</title>
				<para> The IDisposable interface is quite small, its signature look like this and is
					self-explanatory:<programlisting language="actionscript">public interface IDisposable {
 function get isDisposed():Boolean;
 function dispose():void;
} </programlisting></para>
				<para>If an object is encountered in the context that implements this interface its
					dispose() method will be invoked once the context itself is being disposed.</para>
				<para>The IDisposable interface is part of the <literal
						xlink:href="https://www.as3commons.org/as3-commons-lang/index.html"
						>as3commons-lang</literal> library.</para>
			</sect3>
			<sect3>
				<title>The destroyMethod property</title>
				<para>To avoid dependencies on any third-party interfaces the destroy (for the IDisposable
					interface this would be its dispose() method) method for an object can also be defined in
					its associated object definition like
					this:<programlisting language="xml">&lt;object class="..." destroy-method="release"/></programlisting></para>
				<para><abbrev>MXML</abbrev> configuration:</para>
				<programlisting language="xml">&lt;sas:Object clazz="..." destroyMethod="release"/></programlisting>
				<para>Metadata configuration:</para>
				<programlisting language="actionscript">[Component(id="objectOne",destroyMethod="release")]</programlisting>
			</sect3>
		</sect2>
		<sect2 xml:id="factorymethod">
			<title>factoryMethod</title>
			<para>When defining an object which is to be created using a static factory method, along with
				the <emphasis role="bold">className</emphasis> property which specifies the class containing
				the static factory method, another property named <emphasis role="bold"
					>factoryMethod</emphasis> is needed to specify the name of the factory method itself.
				Spring Actionscript expects to be able to call this method and get back a live object, which
				from that point on is treated as if it had been created normally via a constructor. One use
				for such an object definition is to call static factories in legacy code, but it can also be
				used to retrieve objects that have been instantiated in <abbrev>MXML</abbrev> and are later
				pulled into the <abbrev>IoC</abbrev> container to be configured.The following examples show
				an object definition which specifies that the object is to be created by calling a
				factoryMethod. Note that the definition does not specify the type (class) of the returned
				object, only the class containing the factory method. In this example, the <emphasis
					role="italic">getInstance()</emphasis> method must be a static method.</para>
			<programlisting language="xml">&lt;object id="exampleObject"
	class="..."
	factory-method="getInstance"/>   </programlisting>
			<para><abbrev>MXML</abbrev> configuration:</para>
			<programlisting language="xml">&lt;sas:Object id="exampleObject"
	clazz="..."
	factoryMethod="getInstance"/></programlisting>
			<para>Metadata configuration:</para>
			<programlisting language="actionscript">[Component(id="exampleObject",factoryMethod="getInstance")]</programlisting>
			<para> And for this the Actionscript equivalent would be:
				<programlisting language="actionscript">var exampleObject:ExampleObject = ExampleObjectLocator.getInstance();   </programlisting></para>
		</sect2>
		<sect2 xml:id="factoryobjectname">
			<title>factoryObjectName</title>
			<para> Using a factoryMethod property combined with the factoryObjectName property enables you
				to let a second object (also managed by the container) be responsible for instantiating the object using a regular
				method.</para>
			<programlisting language="xml">&lt;object id="exampleFactory"
      class="examples.ExampleObjectFactory"/>

&lt;object id="exampleObject" class="examples.Example"
      factory-object="exampleFactory"
      factory-method="getInstance"/></programlisting>
			<para><abbrev>MXML</abbrev> configuration:</para>
			<programlisting language="xml">&lt;sas:Object id="exampleFactory"
      clazz="{ExampleObjectFactory}"/>

&lt;sas:Object id="exampleObject" clazz="{Example}"
      factoryObject="{exampleFactory}"
      factoryMethod="getInstance"/></programlisting>
			<para>Metadata configuration:</para>
			<programlisting language="actionscript">[Component(id="exampleObject",factoryMethod="getInstance",factoryObjectName="exampleFactory")]</programlisting>
		</sect2>
		<sect2 xml:id="initmethod">
			<title>initMethod</title>
			<para> Object definitions provide support for a generic initialization method to be specified.
				In the case of <abbrev>XML</abbrev>-based configuration metadata, this is done using the
					'<emphasis role="bold">init-method</emphasis>' attribute. For example, the following
				definition: </para>
			<programlisting language="xml">&lt;object id="exampleInitObject" class="examples.ExampleObject" init-method="init"/></programlisting>
			<para><abbrev>MXML</abbrev> configuration:</para>
			<programlisting language="xml">&lt;sas:Object id="exampleInitObject" clazz="{ExampleObject}" initMethod="init"/></programlisting>
			<para>Metadata configuration:</para>
			<programlisting language="actionscript">[Component(id="exampleInitObject",initMethod="init")]</programlisting>
		</sect2>
		<sect2 xml:id="isabstract">
			<title>isAbstract</title>
			<para>An object definition potentially contains a large amount of configuration information,
				including container specific information (for example initialization method, static factory
				method name, and so forth) and constructor arguments and property values. A child object
				definition is an object definition that inherits configuration data from a parent
				definition. It is then able to override some values, or add others, as needed. Using parent
				and child objects definitions can potentially save a lot of typing. Effectively, this is a
				form of templating.</para>
			<para>When using <abbrev>XML</abbrev>-based configuration metadata a child object definition
				is indicated simply by using the '<emphasis role="bold">parent</emphasis>' attribute,
				specifying the parent object as the value of this attribute.</para>
			<programlisting language="xml">&lt;object id="inheritedTestObject" abstract="true" class="org.springactionscript.objects.TestObject">
  &lt;property name="name" value="parent"/>
  &lt;property name="age" value="1"/>
&lt;/object>

&lt;object id="inheritsWithDifferentClass"
      class="org.springactionscript.objects.DerivedTestObject"
      parent="inheritedTestObject" init-method="initialize">
    
  &lt;property name="name" value="override"/>
  &lt;!-- the age property value of 1 will be inherited from  parent -->
&lt;/object></programlisting>
			<para>A child object definition will use the object class from the parent definition if none
				is specified, but can also override it. In the latter case, the child object class must be
				compatible with the parent, that is it must accept the parent's property values.</para>
			<para>A child object definition will inherit constructor argument values, property values and
				method overrides from the parent, with the option to add new values. If any <emphasis
					role="bold">init-method</emphasis> and/or static <emphasis role="bold">factory
					method</emphasis> settings are specified, they will override the corresponding parent
				settings.</para>
			<para>The remaining settings will always be taken from the child definition: <emphasis
					role="bold">depends on</emphasis>, <emphasis role="bold">autowire mode</emphasis>,
					<emphasis role="bold">dependency check</emphasis>, <emphasis role="bold"
					>singleton</emphasis>, <emphasis role="bold">scope</emphasis>, <emphasis role="bold">lazy
					init</emphasis>.</para>
			<para>Note that in the example above, we have explicitly marked the parent object definition
				as abstract by using the <emphasis role="bold">abstract</emphasis> attribute. In the case
				that the parent definition does not specify a class, and so explicitly marking the parent
				object definition as abstract is required:</para>
			<programlisting language="xml">&lt;object id="inheritedTestObject" abstract="true">
  &lt;property name="name" value="parent"/>
  &lt;property name="age" value="1"/>
&lt;/object>

&lt;object id="inheritsWithDifferentClass"
      class="org.springactionscript.objects.DerivedTestObject"
      parent="inheritedTestObject" init-method="initialize">
    
  &lt;property name="name" value="override"/>
  &lt;!-- the age property value of 1 will be inherited from  parent -->
&lt;/object></programlisting>
			<para>The parent object cannot get instantiated on its own since it is incomplete, and it is
				also explicitly marked as abstract. When a definition is defined to be abstract like this,
				it is usable only as a pure template object definition that will serve as a parent
				definition for child definitions. Trying to use such an abstract parent object on its own
				(by referring to it as a ref property of another object, or doing an explicit <emphasis
					role="italic">getObject()</emphasis> call with the parent object id), will result in an
				error. Similarly, the container's internal <emphasis role="italic"
					>instantiateSingletons()</emphasis> method will completely ignore object definitions which
				are defined as abstract.</para>
			<note>
				<para> ApplicationContexts will by default pre-instantiate all singletons. Therefore it is
					important (at least for singleton objects) that if you have a (parent) object definition
					which you intend to use only as a template, and this definition specifies a class, you
					must make sure to set the '<emphasis role="bold">abstract</emphasis>' attribute to
						'<emphasis role="bold">true'</emphasis>, otherwise the application context will actually
					(attempt to) pre-instantiate the abstract object. </para>
			</note>
			<para><abbrev>MXML</abbrev>
				configuration:<programlisting language="xml">&lt;sas:Object id="inheritedTestObject" isAbstract="true">
  &lt;sas:Property name="name" value="parent"/>
  &lt;sas:Property name="age" value="1"/>
&lt;/sas:Object>

&lt;sas:Object id="inheritsWithDifferentClass"
      clazz="{DerivedTestObject}"
      parentName="inheritedTestObject" initMethod="initialize">
    
  &lt;sas:Property name="name" value="override"/>
  &lt;!-- the age property value of 1 will be inherited from  parent -->
&lt;/sas:Object></programlisting></para>
			<para>Metadata configuration:</para>
			<programlisting language="actionscript">[Component(id="inheritingObject",isAbstract="true")]

[Component(id="inheritsWithDifferentClass",parentName="inheritedTestObject")]</programlisting>
		</sect2>
		<sect2 xml:id="isautowirecandidate">
			<title>isAutoWireCandidate</title>
			<para>True if this object can be used as a value used by the container when it autowires an
				object by type. To learn more about autowiring, check out the '<literal linkend="autowiring"
					>Autowiring</literal>' section.</para>
		</sect2>
		<sect2 xml:id="isinterface">
			<title>isInterface</title>
			<para>Another way of defining object configurations is by using the interfaces they might
				implement. Imagine several classes implementing the same interface, if only one interface is
				implemented then using an object definition with an '<emphasis role="bold"
					>abstract="true"</emphasis>' attribute and having all implementing object definitions
				refer to this definition with their 'parent' attribute would suffice, even a template would
				do.</para>
			<para>However, when multiple interfaces are being implemented is when you hit the limitations
				of these configuration options.</para>
			<para>In this case the <emphasis role="bold">&lt;interface/></emphasis> element might be able
				to help you out and in this section we will explain how. Let's make up two simple interfaces
				for this example:</para>
			<programlisting language="actionscript">public interface ISimpleInterface {
	function get myStringProperty():String;
	function set myStringProperty(value:String):void;
}</programlisting>
			<programlisting language="actionscript">public interface ISimpleInitializingInterface {
	function initialize():void;
}</programlisting>
			<para> These interfaces can be configured in the <abbrev>XML</abbrev> configuration like
				this:</para>
			<programlisting language="xml">&lt;interface class="com.mycompany.interfaces.ISimpleInterface">
	&lt;property name="myStringProperty" value="This is my test value!"/>
&lt;/interface>

&lt;interface class="com.mycompany.interfaces.ISimpleInitializingInterface">
	&lt;method-invocation name=initialize"/>
&lt;/interface></programlisting>
			<para> Now, imagine creating a class that implements the aforementioned <emphasis
					role="italic">ISimpleInterface</emphasis>: </para>
			<programlisting language="actionscript">public class MySimpleClass implements ISimpleInterface {
	//implementation omitted
}</programlisting>
			<para> To configure this object in your <abbrev>XML</abbrev> markup all you need to do is
				declare the object: </para>
			<programlisting language="xml">&lt;object id="mySimpleInstance" class="com.mycompany.classes.MySimpleClass"/></programlisting>
			<para>Afterwards Spring Actionscript will take care of combining the configurations for the
				implemented interfaces with your object definition.This works for multiple interfaces as
				well, so another class that would implement both interfaces. Say, something like
				this:</para>
			<programlisting language="actionscript">public class MySimpleInitializingClass implements ISimpleInterface, ISimpleInitializingInterface {
	//implementation omitted
}</programlisting>
			<para> To receive a fully configured instance of this object, all you need to do again is
				simply declare the object like
				this:<programlisting language="xml">&lt;object id="mySimpleInitialzingInstance" class="com.mycompany.classes.MySimpleInitializingClass"/></programlisting></para>
			<para>And in this case Spring Actionscript will have combined the configurations for the
					<emphasis role="italic">ISimpleInterface</emphasis> and <emphasis role="italic"
					>ISimpleInitializingInterface</emphasis> and added it to the <emphasis role="bold"
					>mySimpleInitialzingInstance</emphasis> configuration. </para>
			<para><abbrev>MXML</abbrev>
				configuration:<programlisting language="xml">&lt;sas:Interface clazz="{ISimpleInterface}">
	&lt;sas:Property name="myStringProperty" value="This is my test value!"/>
&lt;/sas:Interface>

&lt;sas:Interface clazz="{ISimpleInitializingInterface}">
	&lt;sas:MethodInvocation name=initialize"/>
&lt;/sas:Interface></programlisting></para>
			<para>The metadata configuration is the most straightforward, all you do is annotate an
				interface in the same way you annotate a class and that's
				it.<programlisting language="actionscript">[Component]
public interface ISimpleInterface {
	[Property(value="This is my test value")]
	function get myStringProperty():String;
	function set myStringProperty(value:String):void;
}</programlisting><programlisting>[Component]
public interface ISimpleInitializingInterface {
	[Invoke]
	function initialize():void;
}</programlisting></para>
		</sect2>
		<sect2 xml:id="islazyinit">
			<title>isLazyInit</title>
			<para>The default behavior for <emphasis role="italic">IApplicationContext</emphasis>
				implementations is to eagerly pre-instantiate all singleton objects at startup.
				Pre-instantiation means that an <emphasis role="italic">IApplicationContext</emphasis> will
				eagerly create and configure all of its singleton objects as part of its initialization
				process. Generally this is a good thing, because it means that any errors in the
				configuration or in the surrounding environment will be discovered immediately (as opposed
				to possibly hours down the line).</para>
			<para>However, there are times when this behavior is not what is desired. If you do not want a
				singleton object to be pre-instantiated when using an <emphasis role="italic"
					>IApplicationContext</emphasis>, you can selectively control this by marking an object
				definition as lazily-initialized. A lazily-initialized object indicates to the
					<abbrev>IoC</abbrev> container whether or not an object instance should be created at
				startup or when it is first requested.</para>
			<para>When configuring objects via <abbrev>XML</abbrev>, this lazy loading is controlled by
				the '<emphasis role="bold">lazy-init</emphasis>' attribute on the <emphasis role="bold"
					>&lt;object/></emphasis> element; for
				example:<programlisting language="xml">&lt;object id="lazy" class="com.foo.ExpensiveToCreateObject" lazy-init="true"/>

&lt;object name="not.lazy" class="com.foo.AnotherObject"/></programlisting></para>
			<para><abbrev>MXML</abbrev>
				configuration:<programlisting>&lt;sas:Object id="lazy" clazz="{ExpensiveToCreateObject}" lazyInit="true"/>

&lt;sas:Object name="not.lazy" clazz="{AnotherObject}"/></programlisting></para>
			<para>Metadata configuration:</para>
			<programlisting language="actionscript">[Component(id="lazy",lazyInit="true")]</programlisting>
			<para>When the above configuration is consumed by an <literal>IApplicationContext</literal>,
				the object named 'lazy' will not be eagerly pre-instantiated when the
					<literal>IApplicationContext</literal> is starting up, whereas the 'not.lazy' object will
				be eagerly pre-instantiated.</para>
			<para>One thing to understand about lazy-initialization is that even though an object
				definition may be marked up as being lazy-initialized, if the lazy-initialized object is the
				dependency of a singleton object that is not lazy-initialized, when the
					<literal>IApplicationContext</literal> is eagerly pre-instantiating the singleton, it will
				have to satisfy all of the singletons dependencies, one of which will be the
				lazy-initialized object! So don't be confused if the <abbrev>IoC</abbrev> container creates
				one of the objects that you have explicitly configured as lazy-initialized at startup;
					<emphasis role="italic">all that means is that the lazy-initialized object is being
					injected into a non-lazy-initialized singleton object elsewhere.</emphasis></para>
		</sect2>
		<sect2 xml:id="issingleton">
			<title>isSingleton</title>
			<para>True if only one instance of this object needs to be created by the container, i.e. every
				subsequent call to the <emphasis role="italic">getObject()</emphasis> method will
				return the same instance. See the section '<literal linkend="scope">scope</literal>'
				for more information. This property is here mainly for backwards compatibility
				reasons, using the <link linkend="scope">scope</link> property is therefore
				recommended.</para>
		</sect2>
		<sect2 xml:id="parent">
			<title>parent</title>
			<para>An object definition whose properties and method invocations will be inherited by the
				current definition. Check out the '<literal linkend="isabstract">isAbstract</literal>'
				section for more information.</para>
		</sect2>
		<sect2 xml:id="parentname">
			<title>parentName</title>
			<para>The name of an object Definition whose properties and method invocations will be
				inherited by the current definition. Check out the '<literal linkend="isabstract"
					>isAbstract</literal>' section for more information.</para>
		</sect2>
		<sect2 xml:id="primary">
			<title>primary</title>
			<para>True if this object needs to be used as the primary autowire candidate when the
				container is autowiring by type. This means that if multiple objects are found of the same
				type, the object marked as '<emphasis role="bold">primary</emphasis>' will become the
				autowire candidate. To learn more about autowiring, check out the '<literal
					linkend="autowiring">Autowiring</literal>' section.</para>
		</sect2>
		<sect2 xml:id="scope">
			<title>scope</title>
			<para>When you create an object definition what you are actually creating is a recipe for
				creating actual instances of the class defined by that object definition. The idea that an
				object definition is a recipe is important, because it means that, just like a class, you
				can potentially have many object instances created from a single recipe.</para>
			<para>You can control not only the various dependencies and configuration values that are to be
				plugged into an object that is created from a particular object definition, but also
				the scope of the objects created from a particular object definition. This approach
				is very powerful and gives you the flexibility to choose the scope of the objects
				you create through configuration instead of having to 'bake in' the scope of an
				object at the Actionscript class level. Objects can be defined to be deployed in one
				of a number of scopes:</para>
			<table border="1">
				<caption>Object scopes</caption>
				<tr>
					<th>Scope</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>singleton</td>
					<td>Scopes a single object definition to a single object instance per Spring
						Actionscript <abbrev>IoC</abbrev> container.</td>
				</tr>
				<tr>
					<td>prototype</td>
					<td>Scopes a single object definition to any number of object instances.</td>
				</tr>
				<tr>
					<td>stage</td>
					<td>The instance that this definition refers to is created on the stage, the container only
						injects the instance's dependencies.</td>
				</tr>
				<tr>
					<td>remote</td>
					<td>The instance that this definition refers to is created remotely, the container only injects
						the instance's dependencies.</td>
				</tr>
			</table>
			<sect3 xml:id="the-singleton-scope">
				<title>The singleton scope</title>
				<para>When an object is a singleton, only one shared instance of the object will be managed,
					and all requests for objects with an id matching that object definition will result in
					that one specific object instance being returned by the Spring Actionscript
					container.</para>
				<para>To put it another way, when you define an object definition and it is scoped as a
					singleton, then the Spring Actionscript <abbrev>IoC</abbrev> container will create exactly
					one instance of the object defined by that object definition. This single instance will be
					stored in a cache of such singleton objects, and all subsequent requests and references
					for that named object will result in the cached object being returned.</para>
				<para>Please be aware that Spring Actionscript's concept of a singleton object is quite
					different from the Singleton pattern as defined in the seminal Gang of Four (GoF) patterns
					book. The GoF Singleton hard codes the scope of an object such that one and only one
					instance of a particular class will ever be created. The scope of the Spring Actionscript
					singleton is best described as per container and per object. This means that if you define
					one object for a particular class in a single Spring Actionscript container, then the
					Spring Actionscript container will create one and only one instance of the class defined
					by that object definition. The singleton scope is the default scope in Spring
					Actionscript. To define an object as a singleton in <abbrev>XML</abbrev>, you would write
					configuration like so:</para>
				<programlisting language="xml">&lt;object id="accountService" class="com.foo.DefaultAccountService"/>

&lt;!-- the following is equivalent, though redundant (singleton scope is the default) -->
&lt;object id="accountService" class="com.foo.DefaultAccountService" scope="<emphasis role="bold">singleton</emphasis>"/></programlisting>
				<para><abbrev>MXML</abbrev> configuration:</para>
				<programlisting language="xml">&lt;sas:Object id="accountService" clazz="{DefaultAccountService}"/>

&lt;!-- the following is equivalent, though redundant (singleton scope is the default) -->
&lt;sas:Object id="accountService" clazz="{DefaultAccountService}" scope="<emphasis role="bold">singleton</emphasis>"/></programlisting>
				<para>Metadata
					configuration:<programlisting language="actionscript">[Component(id="accountService")]

[Component(id="accountService",scope="<emphasis role="bold">singleton</emphasis>")]</programlisting></para>
			</sect3>
			<sect3 xml:id="the-prototype-scope">
				<title>The prototype scope</title>
				<para>The non-singleton, prototype scope of object deployment results in the creation of a
					new object instance every time a request for that specific object is made (that is, it is
					injected into another object or it is requested via a programmatic <emphasis role="italic"
						>getObject()</emphasis> method call on the container). As a rule of thumb, you should
					use the prototype scope for all objecs that are stateful, while the singleton scope should
					be used for stateless objects.</para>
				<para> To define an object as a prototype in <abbrev>XML</abbrev>, you would write configuration
					like so:</para>
				<programlisting language="xml">&lt;!-- recommended markup -->
&lt;object id="accountService" class="com.foo.DefaultAccountService" scope="<emphasis role="bold">prototype</emphasis>"/></programlisting>
				<para><abbrev>MXML</abbrev> configuration:</para>
				<programlisting>&lt;!-- recommended markup -->
&lt;sas:Object id="accountService" clazz="{DefaultAccountService}" scope="<emphasis role="bold">prototype</emphasis>"/></programlisting>
				<para>Metadata
					configuration:<programlisting language="actionscript">[Component(id="accountService",scope="<emphasis role="bold">prototype</emphasis>")]</programlisting></para>
			</sect3>
			<sect3 xml:id="the-stage-scope">
				<title>The stage scope</title>
				<para>The stage scope indicates that the specified object definition is associated
					with a stage component. Check out the <literal linkend="autowiring-instances"
						>Autowiring section</literal> for more information about this.</para>
			</sect3>
			<sect3 xml:id="the-remote-scope">
				<title>The remote scope</title>
				<para>The remote scope indicates that the object definition is associated with an instance that
					isn't created by the container itself. In most cases this would indicate a
					server object, but could also mean an <literal>Event</literal> intercepted in
					the <literal>EventBus</literal>, for instance.</para>
				<sect4 xml:id="lazy-injection"><title>Lazy dependency injection</title><para>adds</para></sect4>
			</sect3>
			<sect3 xml:id="singleton-objects-with-prototype-object dependencies">
				<title>Singleton objects with prototype-object dependencies</title>
				<para> When using singleton-scoped objects that have dependencies on objects that are scoped as
					prototypes, please be aware that <emphasis role="italic">dependencies are
						resolved at instantiation time</emphasis>. This means that if you inject a
					prototype-scoped object into a singleton-scoped object, a brand new prototype
					object will be instantiated and then injected into the singleton object... but
					that is all. That exact same prototype instance will be the sole instance that
					is ever supplied to the singleton-scoped object, which is fine if that is what
					you want.</para>
				<para>However, sometimes what you actually want is for the singleton-scoped object to be able to
					acquire a brand new instance of the prototype-scoped bean again and again and
					again at runtime. In that case it is no use just dependency injecting a
					prototype-scoped object into your singleton object, because as explained above,
					that only happens once when the Spring Actionscript container is instantiating
					the singleton object and resolving and injecting its dependencies.</para>
				<para>The only way to solve this is by injecting the application context into the
					singleton and having it retrieve a new instance of the prototype each time its
					needed by invoking the <emphasis role="italic"
						>ApplicationContext.getObject()</emphasis> method.</para>
			</sect3>
		</sect2>
		<sect2 xml:id="skipmetadata">
			<title>skipMetadata</title>
			<para>Determines whether the autowire processor will examine the class for the existence of
					<emphasis role="bold">[Inject]</emphasis> or <emphasis role="bold">[Autowire]</emphasis>
				metadata. To learn more about autowiring, check out the '<literal linkend="autowiring"
					>Autowiring</literal>' section.</para>
		</sect2>
		<sect2 xml:id="skippostprocessors">
			<title>skipPostProcessors</title>
			<para>Determines whether the application context will send the created object through its list
				of object postprocessors. To learn more about object postprocessors, check out the '<literal
					linkend="object-post-processors">Object post-processors</literal>' section.</para>
		</sect2>
		<sect2 xml:id="custom-object-definition-configurators">
			<title>Custom object definition configurators</title>
			<para>If an Object needs specific customized configuration an
					<literal>ICustomConfiguration</literal> implementation may be associated with
				the definition. To do so in the <abbrev>MXML</abbrev> configuration simply nest the
				following configuration with the &lt;sas:Object/>
				element:<programlisting>&lt;sas:Object id="myInstance" clazz="{MyClass}">
	<emphasis role="bold">&lt;sas:CustomConfigurator clazz="{MyCustomConfigClass}"/></emphasis>
&lt;/sas:Object></programlisting></para>
			<para>Or add it as a reference if the same custom configuration needs to be used across multiple
				object
				definitions:<programlisting>&lt;sas:Object id="myInstance" clazz="{MyClass}">
	&lt;sas:CustomConfigurator ref="<emphasis role="bold">myCustomConfig</emphasis>"/>
&lt;/sas:Object>

&lt;sas:Object id="myOtherInstance" clazz="{MyOtherClass}">
	&lt;sas:CustomConfigurator ref="<emphasis role="bold">myCustomConfig</emphasis>"/>
&lt;/sas:Object>

&lt;sas:Object id="<emphasis role="bold">myCustomConfig</emphasis>" clazz="{MyCustomConfigClass}" scope="prototype"/></programlisting></para>
		</sect2>
		<sect2 xml:id="default-object-definition-properties">
			<title>Default Object Definition Properties</title>
			<para>Object definitions have, hopefully, sensible defaults. But some shortcuts can be set on the
				main configuration element (so the &lt;sas:Objects/> or &lt;objects/> element) to
				enable to change those without having to set these properties on every definition in
				the configuration:<itemizedlist>
					<listitem>
						<para>autoWireMode</para>
					</listitem>
					<listitem>
						<para>childContextAccess</para>
					</listitem>
					<listitem>
						<para>dependencyCheck</para>
					</listitem>
					<listitem>
						<para>destroyMethod</para>
					</listitem>
					<listitem>
						<para>factoryMethod</para>
					</listitem>
					<listitem>
						<para>factoryObjectName</para>
					</listitem>
					<listitem>
						<para>initMethod</para>
					</listitem>
					<listitem>
						<para>isAutoWireCandidate</para>
					</listitem>
					<listitem>
						<para>isLazyInit</para>
					</listitem>
					<listitem>
						<para>parentName</para>
					</listitem>
					<listitem>
						<para>scope</para>
					</listitem>
					<listitem>
						<para>skipMetadata</para>
					</listitem>
					<listitem>
						<para>skipPostProcessors</para>
					</listitem>
				</itemizedlist></para>
		</sect2>
	</sect1>
</chapter>
