<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="extending-the-application-context"
	xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:ns5="http://www.w3.org/1999/xhtml" xmlns:ns4="http://www.w3.org/1998/Math/MathML"
	xmlns:ns3="http://www.w3.org/2000/svg">
	<title>Extending the application context</title>

	<sect1 xml:id="factory-objects">
		<title>Factory objects</title>
		<para> The <literal>IFactoryObject</literal> interface is to be implemented by objects
				that <emphasis role="italic">are themselves factories</emphasis>.</para>
		<para>he <literal>IFactoryObject</literal> interface is a point of pluggability into the Spring
			Actionscript <abbrev>IoC</abbrev> containers instantiation logic. If you have some complex
			initialization code that is better expressed in Actionscript as opposed to a (potentially)
			verbose amount of <abbrev>XML</abbrev>, you can create your own
				<literal>IFactoryObject</literal>, write the complex initialization inside that class, and
			then plug your custom <literal>IFactoryObject</literal> into the container.</para>
		<para>Now when you request an instance of such an <literal>IFactoryObject</literal> from the
			container, it doesn't actually return an <literal>IFactoryObject</literal> instance, instead,
			it calls the <emphasis role="italic">getObject()</emphasis> method on the object and returns
			the result of this method.</para>
		<para>The <literal>IFactoryObject</literal> interface provides three methods:<itemizedlist>
				<listitem>
					<para> getObject():*; has to return an instance of the object this factory creates. The
						instance can possibly be shared (depending on whether this factory returns singletons or
						prototypes).</para>
				</listitem>
				<listitem>
					<para> isSingleton():Boolean; has to return true if this <literal>IFactoryObject</literal>
						returns singletons, false otherwise.</para>
				</listitem>
				<listitem>
					<para> getObjectType():Class; has to return either the object type returned by the
						getObject() method or null if the type isn't known in advance.</para>
				</listitem>
			</itemizedlist></para>
		<para>Let's say we need to instantiate an object of class
				<literal>IncrediblyComplicatedObject</literal>. The initialization of this object involves
			some kind of logic that is beyond the scope of Spring Actionscript and way too complicated to
			be expressed in <abbrev>XML</abbrev>. We are of course able to write our own code to perform
			this. We can now build an <literal>IFactoryObject</literal> that implements this task:</para>
		<programlisting language="actionscript">public class IncrediblyComplicatedObjectFactory implements IFactoryObject {

	public function getObject():* {
		var instance:IncrediblyComplicatedObject = new IncrediblyComplicatedObject();
		//creation logic ommitted
		return instance;
	}

	public function getObjectType():Class {
		return IncrediblyComplicatedObject;
	}

	public function get isSingleton():Boolean {
		return false;
	}

}</programlisting>
		<para>The <emphasis role="italic">isSingleton()</emphasis> method returns false, this means that
			every time this <literal>IFactoryObject</literal> is requested from the container, it creates
			a new instance of <literal>IncrediblyComplicatedObject</literal>. When set to <emphasis
				role="bold">true</emphasis> it will create an instance once, and return this on every
			subsequent call. (At least, if the interface is properly implemented :) ).</para>
		<para>In order to use an <literal>IFactoryObject</literal> in your application, include it as an
			object in your application
			context:<programlisting language="xml">&lt;object class="com.myclasses.factories.IncrediblyComplicatedObjectFactory" id="incrediblyComplicatedObject"/></programlisting></para>
		<para><abbrev>MXML</abbrev> configuration:</para>
		<programlisting language="xml">&lt;sas:Object clazz="{IncrediblyComplicatedObjectFactory}" id="incrediblyComplicatedObject"/></programlisting>
		<para>Metadata configuration:</para>
		<programlisting language="actionscript">[Component(id="incrediblyComplicatedObject")]
public class IncrediblyComplicatedObjectFactory {
	// implementation omitted
}</programlisting>
		<para> After that, requesting an instance of <literal>IncrediblyComplicatedObject</literal> is
			the same as requesting any other ordinary object from the container: </para>
		<programlisting language="actionscript">var complicated:IncrediblyComplicatedObject = applicationContext.getObject("incrediblyComplicatedObject") as IncrediblyComplicatedObject;</programlisting>
		<para>Finally, there is sometimes a need to ask a container for an actual
				<literal>IFactoryObject</literal> instance itself, not the object it produces. This may be
			achieved by prepending the object id with '<emphasis role="bold">&amp;</emphasis>' (sans
			quotes) when calling the <emphasis role="italic">getObject()</emphasis> method of the
			ObjectFactory (including ApplicationContext). So for a given <literal>IFactoryObject</literal>
			with an id of <emphasis role="bold">myObject</emphasis>, invoking <emphasis role="italic"
					>getObject("<emphasis role="bold">myObject</emphasis>")</emphasis> on the container will
			return the product of the <literal>IFactoryObject</literal>, but invoking <emphasis
				role="italic">getObject("<emphasis role="bold">&amp;myObject</emphasis>")</emphasis> will
			return the <literal>IFactoryObject</literal> instance itself.</para>
		<sect2>
			<title>A factory object wrapper</title>
			<para>Having to implement the <literal>IFactoryObject</literal>, naturally, adds an
				unneccessary dependency on the Spring Actionscript framework. It is therefore also possible
				to mark a factory as such in the <abbrev>XML</abbrev> configuration without it having to
				implement the <literal>IFactoryObject</literal> interface.</para>
			<para>Let's first create a factory object that looks like this:</para>
			<programlisting>public class IncrediblyComplicatedObjectFactoryThatDoesNotImplementIFactoryObject {

	public function createNewInstance():* {
		var instance:IncrediblyComplicatedObject = new IncrediblyComplicatedObject();
		//creation logic ommitted
		return instance;
	}
}</programlisting>
			<para>Now add this namespace handler to the
				<literal>XMLApplicationContext</literal>:<programlisting language="actionscript">xmlApplicationContext.addNamespaceHandler(new UtilNamespaceHandler());</programlisting></para>
			<para>In the <abbrev>XML</abbrev> configuration, add this namespace:</para>
			<programlisting>xmlns:util='http://www.springactionscript.org/schema/util'</programlisting>
			<para>Now add the factory object to the configuration like this:</para>
			<programlisting language="xml">&lt;util:factory
	factory-method="createNewInstance"
	class="com.myclasses.factories.IncrediblyComplicatedObjectFactoryThatDoesNotImplementIFactoryObject"
	id="incrediblyComplicatedObject"/></programlisting>
			<para>Internally this factory instance will be wrapped in a
					<literal>GenericFactoryObject</literal> instance which itself is an
					<literal>IFactoryObject</literal> implementation.</para>
			<para>In metadata it's a lot easier to implement, simply annotate your factory object with the
				following metadata:</para>
			<programlisting language="actionscript">[Factory(factoryMethod="createNewInstance")]
public class IncrediblyComplicatedObjectFactoryThatDoesNotImplementIFactoryObject {
	public function createNewInstance():* {
		var instance:IncrediblyComplicatedObject = new IncrediblyComplicatedObject();
		//creation logic ommitted
		return instance;
	}
}</programlisting>
			<para>And in <abbrev>MXML</abbrev> the configuration will look like
				this:<programlisting language="xml">&lt;sas:FactorObjectDefinition
	factoryMethod="createNewInstance"
	clazz="{IncrediblyComplicatedObjectFactoryThatDoesNotImplementIFactoryObject}"
	id="incrediblyComplicatedObject"/></programlisting></para>
		</sect2>
	</sect1>
	<sect1 xml:id="object-post-processors">
		<title>Object post-processors</title>
		<para>The extension point that we will look at in this section is the
				<literal>IObjectPostProcessor</literal> interface. This interface defines a number of
			callback methods that you as an application developer can implement in order to provide your
			own (or override the containers default) instantiation logic, dependency-resolution logic, and
			so forth. If you want to do some custom logic after the Spring Actionscript container has
			finished instantiating, configuring and otherwise initializing an object, you can plug in one
			or more <literal>IObjectPostProcessor</literal> implementations.</para>
		<note>
			<para><literal>IObjectPostProcessors</literal> operate on object instances; that is to say,
				the Spring Actionscript <abbrev>IoC</abbrev> container will have instantiated an object
				instance for you, and then <literal>IObjectPostProcessors</literal> get a chance to do their
				stuff. If you want to change the actual object definition (that is the recipe that defines
				the object), then you rather need to use an <literal>IObjectFactoryPostProcessor</literal>
				(described below in the section entitled '<literal linkend="objectfactory-post-processors"
					>Objectfactory post-processors</literal>').</para>
		</note>
		<para>The <literal>IObjectPostProcessor</literal> interface consists of exactly two callback
			methods. When such a class is registered as a post-processor with the container, for each
			object instance that is created by the container, the post-processor will get a callback from
			the container both before any container initialization methods (such as <emphasis
				role="italic">afterPropertiesSet</emphasis> and any declared init method) are called, and
			also afterwards. The post-processor is free to do what it wishes with the object instance,
			including ignoring the callback completely. An object post-processor will typically check for
			callback interfaces, or do something such as wrap an object with a proxy.</para>
		<para>An <literal>ApplicationContext</literal> will automatically detect any objects which are
			defined in the configuration metadata which is supplied to it that implement the
				<literal>IObjectPostProcessor</literal> interface, and register them as post-processors, to
			be then called appropriately by the container on object creation. Nothing else needs to be
			done other than deploying the post-processors in a similar fashion to any other object.</para>
		<note>
			<para>You can force the object factory to ignore its list of
					<literal>IObjectPostProcessors</literal> for a given object definition by setting its
					<emphasis role="italic">skipPostprocessors</emphasis> property to <emphasis role="bold"
					>true</emphasis>. This will yield a small performance boost. For more check the subsection
					'<literal linkend="skippostprocessors">skipPostProcessors</literal>' of the '<literal
					linkend="object-definitions">Object Definitions</literal>' section.</para>
		</note>
		<sect2>
			<title>Creating a postprocessor</title>
			<para> Let's see how we can build our own processor. Suppose we have an
					<literal>IProductManager</literal> interface that looks like this:
				<programlisting language="actionscript">public interface IProductManager {

	function get items():ArrayCollection;
	function set items(value:ArrayCollection):void;
}</programlisting></para>
			<para>At runtime the actual items will be loaded by a server call and stored in the
				application model. Since we won't know exactly when the items will be loaded we can't use
				the <literal>FieldRetrievingFactoryObject</literal> to simply assign the model's items to
				the items property of the <literal>IProductManager</literal> instance. What we'd like to do
				is actually bind the productmanager's items to the model items.</para>
			<para>Let's see if we can build something that performs this task. We will implement the
					<literal>IObjectPostProcessor</literal> interfaces like
				this:<programlisting language="actionscript">public class PropertyBindingPostProcessor implements IObjectPostProcessor {

	public function PropertyBindingPostProcessor() {
		super();
	}
 
	private var _host:Object;
	public set host(value:Object):void {
		_host = host;
	}
	private var _chain:Object;
	public set chain(value:Object):void {
		_chain = value;
	}

	public function postProcessBeforeInitialization(object:*, objectName:String):* {
		if (object is IProductManager){
			BindingUtils.bindProperty(object,'items',host,chain);
 		}
	}
 
	public function postProcessAfterInitialization(object:*, objectName:String):* {
		return null;
	}

}</programlisting></para>
			<para> Now all we need to do is add this bit of configuration and the post processor is ready
				to do its work: </para>
			<programlisting language="xml">&lt;object id="propertyBindingPostProcessor" class="com.myclasses.postprocessors.PropertyBindingPostProcessor">
	&lt;property name="host" ref="modelInstance"/>
	&lt;property name="chain" value="items"/>
&lt;/object></programlisting>
			<para><abbrev>MXML</abbrev> configuration:</para>
			<programlisting language="xml">&lt;sas:Object id="propertyBindingPostProcessor" clazz="{PropertyBindingPostProcessor}">
	&lt;sas:Property name="host" ref="{modelInstance}"/>
	&lt;sas:Property name="chain" value="items"/>
&lt;/sas:Object></programlisting>
			<para>Metadata
				configuration:<programlisting language="actionscript">[Component(id="propertyBindingPostProcessor")]
public class PropertyBindingPostProcessor implements IObjectPostProcessor {
	//Implementation ommitted
}</programlisting></para>
			<para> That's it basically it! Now its certainly possible to come up with a much more generic
				solution than this, but it does show its fairly easy to create your own post processors for
				specific tasks. </para>
		</sect2>
	</sect1>
	<sect1 xml:id="metadata-processors">
		<title>Metadata processors</title>
		<para> Spring Actionscript offers an easy way to process actionscript metadata annotations. An
				<literal xlink:href="https://www.as3commons.org">AS3Commons</literal> library is used
			to faciliate this functionality: <literal
				xlink:href="https://www.as3commons.org/as3-commons-metadata/index.html"
				>as3commons-metadata</literal>.</para>
		<para>The main interface of interest in this library
				is <literal>IMetadataProcessor</literal>. It looks like
			this:<programlisting language="actionscript">public interface IMetadataProcessor {
	function get metadataNames():Vector.&lt;String>;
	function canProcess(metadataName:String):Boolean;
	function process(target:Object, metadataName:String, params:Array=null):*;
}</programlisting></para>
		<para>Spring Actionscript offers a slightly specialized version of this interface focused on
			some Spring conventions, this is what it adds:</para>
		<programlisting language="actionscript">public interface ISpringMetadataProcessor extends IMetadataProcessor {
	function get processBeforeInitialization():Boolean;
	function set processBeforeInitialization(value:Boolean):void;
}</programlisting>
		<para>The basic properties have already been implemented by the
				<literal>AbstractSpringMetadataProcessor</literal> base class which can be used for
			convenience.</para>
		<para>Let's take a look at the various properties and methods and see what they do and
			mean.</para>
		<itemizedlist>
			<listitem>
				<para><emphasis role="bold">metadataNames</emphasis> - This is a
						<literal>Vector.&lt;String></literal> of metadata names that will trigger
					the <emphasis role="italic">process()</emphasis> method of the
						<literal>IMetadataProcessor</literal> implementation.</para>
			</listitem>
			<listitem>
				<para><emphasis role="bold">canProcess</emphasis> - This method is ignored by the
					Spring implementation.</para>
			</listitem>
			<listitem>
				<para><emphasis role="bold">processBeforeInitialization</emphasis> - Spring Actionscript
					specific: When set to <emphasis role="bold">true</emphasis> the
						<literal>IMetadataProcessor</literal> instance will be able to process the
					annotated instance before it has been initialized by the Spring Actionscript
					container. This means before its init method has been invoked.</para>
			</listitem>
			<listitem>
				<para><emphasis role="bold">process</emphasis> - This method will contain the processing logic
					that is associated with the various names specified by the <emphasis role="bold"
						>metadataNames</emphasis> property.</para>
			</listitem>
		</itemizedlist>
		<para>The <emphasis role="italic">process()</emphasis> method will naturally be the most
			important aspect in any implementation of the <literal>IMetadataProcessor</literal>
			interface. It receives three parameters:<itemizedlist>
				<listitem>
					<para><emphasis role="bold">target</emphasis> - This is the target that was
						encountered with the specified metadata name on its class or its methods or
						properties.</para>
				</listitem>
				<listitem>
					<para><emphasis role="bold">metadataName</emphasis> - The metadata name that
						triggered the invocation of the <emphasis role="italic">process()</emphasis>
						method.</para>
				</listitem>
				<listitem>
					<para><emphasis role="bold">params</emphasis> - An Array of extra parameters. In Spring
						Actionscript's case the first parameter will be an
							<literal>IMetadataContainer</literal>, this can be any of these
						subclasses: <literal>Type</literal>, <literal>Method</literal>,
							<literal>Accessor</literal>, <literal>Constant</literal>,
							<literal>Variable</literal>. The second paramter will be the object's
						name as registered in the application context. (or null if the name is
						unknown).</para>
				</listitem>
			</itemizedlist></para>
	</sect1>
	<sect1>
		<para>To use an <literal>IMetadataProcessor</literal> in an application add the
			implementation as an object definition to the application context configuration like
			this:</para>
		<programlisting language="xml">&lt;object id="mvcEventsProcessor" class="org.springextensions.actionscript.core.mvc.MVCRouteEventsMetaDataProcessor"/></programlisting>
		<para>After that the processor is ready to go, when used in combination with the autowiring
			stage processor (as described in the '<literal linkend="autowiring"
			>Autowiring</literal>') it will process both objects created by the container and
			components that were added to the stage.</para>
		<note>
			<para>Credit where credit is due: This type of metadata handling is similar to the
					<literal
					xlink:href="https://www.spicefactory.org/parsley/docs/2.3/api/parsley-flex/org/spicefactory/parsley/config/ObjectDefinitionDecorator.html"
					>ObjectDefinitionDecorator</literal> in the <literal
					xlink:href="https://www.spicefactory.org/parsley/">Parsley Framework</literal>
				and the IMetadataProcessor in the <literal xlink:href="https://www.swizframework.org"
					>Swiz Framework</literal>, the Spring Actionscript team both acknowledges and
				appreciates this work.</para>
			<para>Java programmers will see obvious similarities to the <literal
					xlink:href="https://download.oracle.com/javase/1.5.0/docs/guide/apt/mirror/com/sun/mirror/apt/AnnotationProcessor.html"
					>Java annotation processor</literal>.</para>
		</note>
		<note>
			<para>For a specialised use of the metadata processing system, also take a look at the
					<literal linkend="class-scanners">class scanners section</literal>.</para>
		</note>
		<sect2 xml:id="controlling-the-order-of-imetadataprocessors">
			<title>Controlling the order of IMetadataProcessors</title>
			<para>The order in which <literal>IMetadataProcessors</literal> are executed is
				controlled by the <literal>IOrdered</literal> interface. See the
					'<literal>Controlling collection order</literal>' section for more information
				on this interface.</para>
		</sect2>
	</sect1>
	<sect1 xml:id="objectfactory-post-processors">
		<title>Objectfactory post-processors</title>
		<para>The extension point covered in this section is the
				<literal>IObjectFactoryPostProcessor</literal>. The semantics of this interface are similar
			to the <literal>IObjectPostProcessor</literal>, with one major difference:
				<literal>IObjectFactoryPostProcessors</literal> operate on the object configuration
			metadata; that is, the Spring Actionscript <abbrev>IoC</abbrev> container will allow
				<literal>IObjectFactoryPostProcessors</literal> to read the configuration metadata (object
			definitions) and potentially change it before the container has actually instantiated any
			other objects.</para>
		<para> The interface is fairly simple as you can see: </para>
		<programlisting language="actionscript">public interface IObjectFactoryPostProcessor {
	function postProcessObjectFactory(objectFactory:IConfigurableListableObjectFactory):void;
}</programlisting>
		<para>In order to use an <literal>IObjectFactoryPostProcessor</literal> in your application,
			include the implementation as an object in your application context:</para>
		<programlisting language="xml">&lt;object class="com.myclasses.postprocessors.MyObjectFactoryPostProcessor" id="objectFactoryPostProcessor"/></programlisting>
		<para><abbrev>MXML</abbrev>
			configuration:<programlisting language="xml">&lt;sas:Object clazz="{MyObjectFactoryPostProcessor}" id="objectFactoryPostProcessor"/></programlisting></para>
		<para>Metadata configuration:</para>
		<programlisting language="actionscript">[Component(id="objectFactoryPostProcessor")]
public class MyObjectFactoryPostProcessor implements IObjectFactoryPostProcessor {
	//Implementation ommitted...
}</programlisting>
		<para>Now after the application context has finished loading its configuration file, and before
			it starts instantiating any objects every <literal>IObjectFactoryPostProcessor</literal> that
			was found in the configuration will be invoked by calling its <emphasis role="italic"
				>postProcessObjectFactory()</emphasis> method and passing the current
				<literal>IObjectFactory</literal> instance as the argument. The
				<literal>IObjectFactoryPostProcessor</literal> can then use the
				<literal>IObjectFactory</literal> interface to perform whatever postprocessing logic is
			necessary.</para>
	</sect1>
	<sect1 xml:id="stage-processors">
		<title>Stage object processors</title>
		<para>As you can read in the '<literal linkend="autowiring-stage-components">Autowiring stage
				components</literal>' section it is possible to intercept components after they have been
			added to the stage and perform abritrary processing on them.</para>
		<para>The logic behind this used to be an internal part of Spring Actionscript but since version
			2.0 it has been split off and released as an autonomous API in the <literal
				xlink:href="https://www.as3commons.org/as3-commons-stageprocessing"
				>as3commons-stageprocessing</literal> project. Please refer to the <literal
				xlink:href="https://www.as3commons.org/as3-commons-stageprocessing/introduction.html"
				>documentation section on the as3commons.org</literal> site for specific info on the
			internals.</para>
		<para>To register your own <literal>IStageObjectProcessor</literal> and/or
				<literal>IStageObjectDestroyer</literal> implementations you can add them using the
			following <abbrev>XML</abbrev> and <abbrev>MXML</abbrev> extensions.</para>
		<para><abbrev>XML</abbrev>
			configuration:<programlisting>&lt;stage:stageprocessor
	class='org.springextensions.actionscript.test.testtypes.stage.TestStageProcessor'
	object-selector='selector'/></programlisting></para>
		<para><abbrev>MXML</abbrev>
			configuration:<programlisting>&lt;sas:StageObjectProcessor
	clazz="{TestStageProcessor}"
	objectSelector="selector"/></programlisting></para>
		<para>To learn more about configuration extensions, check out the section '<literal
				linkend="extending-configuration-types">Extending configurations</literal>'.</para>
		<sect2 xml:id="spring-stage-extensions">
			<title>Spring Actionscript Stage Extensions</title>
			<para>Spring Actionscript offers a couple of <literal>IStageObjectProcessors</literal>
				out-of-the-box. In this section we take a look at each of them.</para>
			<para>....</para>
		</sect2>
	</sect1>
	<sect1 xml:id="class-scanners">
		<title>Class scanners</title>
		<para>The way that the <literal>MetadataApplicationContext</literal> extracts classes annotated
			with the <emphasis role="bold">[Component]</emphasis> or <emphasis role="bold"
				>[Configuration]</emphasis> metadata is also opened up to extension. This
			functionality is basically a specialised version of the regular <literal
				linkend="metadata-processors">metadata processing system</literal>.</para>
		<para>This system will parse the currently loaded SWF's bytecode and create a lookup of
			class metadata to class objects. After that it will iterate over all of its processors
			and checks if any classes exist that have been annotated with the metadata that the
			processor has been registered for. If so the process() method of the appropriate
				<literal>IClassScanner</literal> will be invoked.</para>
		<para>To leverage this functionality it is requried to implement the
				<literal>IClassScanner</literal> interface. This interface is an extension of the
				<literal>IMetadataProcessor</literal> interface without any extra members declared.
			It functions merely as a marker interface to indicate that this particular
			metadataprocessor needs to be registered by the class scanning system.</para>
		<para>When an <literal>IClassScanner</literal> was registred by the class scanning system
			then afterwards its process() method will be invoked when a Class with the specified
			metadata is encountered. The process() method has this
			signature:<programlisting>function process(target:Object, metadataName:String, params:Array=null):*;</programlisting></para>
		<para>When invoked by the class scanning system the <emphasis role="bold">target</emphasis>
			parameter will be the Class object that was encountered, the <emphasis role="bold"
				>metadataName</emphasis> parameter the exact metadata that was found on this class
			(and that the processor has been registered with), the <emphasis role="bold"
				>params</emphasis> array parameter will contain one item: A <literal>Type</literal>
			object describing the specified Class.</para>
		<para>To register an <literal>IClassScanner</literal> with the class scanning system either
			add an object definition to the context
			configuration:<programlisting>&lt;object class="com.myclasses.metadata.classscanners.CustomClassScanner" id="myCustomClassScanner"/></programlisting></para>
		<para>Or in <abbrev>MXML</abbrev>
			cofiguration:<programlisting>&lt;sas:Object clazz="{CustomClassScanner}" id="myCustomClassScanner"/></programlisting></para>
		<para>Or just make sure the class gets compiled into the application by declaring its class
			somewhere. The class scanning system is able to automatically detect any
				<literal>IClassScanner</literal> implementations and will try to instantiate and
			register them. If the instantiation requires any kind of complex injection or
			initialization its safer to opt for an object definition.</para>
	</sect1>
	<sect1 xml:id="customizing-context-logic">
		<title>Customizing context logic</title>
		<para>If the inner logic of an application context needs to be customized even deeper there is the possibility to swap out certain parts of the context and object
			factory with custom implementations.</para>
		<para>To insert these parts is just a matter of adding the implementation to the context
			configuration. In its bootstrap the context will search for these implementations and
			when found will inject them into itself instead of creating one of the default
			implementations.</para>
		<para>These are the parts that may be customized, they are looked up and inserted in exactly
			the following order:<itemizedlist>
				<listitem>
					<para><literal>IDependencyInjector</literal> - The main mechanism that performs
						dependency injection</para>
				</listitem>
				<listitem>
					<para><literal>IAutowireProcessor</literal> - The logic responsible for
						injecting dependencies automatically</para>
				</listitem>
				<listitem>
					<para><literal>IEventBus</literal> - For more more information about this
						interface please refer to the <literal
							xlink:href="https://www.as3commons.org/as3-commons-eventbus">as3commons.org/eventbus
							documentation</literal>.</para>
				</listitem>
				<listitem>
					<para><literal>IObjectDestroyer</literal> - This part of the context is
						responsible for cleaning up objects, essentially getting them ready for
						garbage collection.</para>
				</listitem>
			</itemizedlist></para>
		<note><para>Do not use any <literal linkend="using-property-files">placeholders</literal> (external
				properties) in the <literal>IDependecyInjector</literal> configuration, when this
				instance is created the property replacement mechanism hasn't been initialized yet.
				The subsequent parts <emphasis role="italic">can</emphasis> receive external
				properties though.</para></note>
	</sect1>
</chapter>
